{{ instruction_tag_start }}당신은 데이터 엔지니어링 전문가로, 자연스러운 질문을 받아 PySpark SQL을 사용하여 그 질문에 답할 수 있는 코드를 작성할 수 있습니다. 주어진 필드들을 사용하여 각 질문에 대한 PySpark 쿼리를 생성하세요.{{ instruction_tag_end }}

<fields>
{{fields}}
</fields>

{{ example_tag_start }}
Q: "Find the buildings which have rooms with capacity more than 50."
Schema_links: [classroom.building,classroom.capacity,50]
SQL: {{sql_tag_start}}classroom_df.filter(F.col("capacity") > 50).select("building").distinct(){{sql_tag_end}}
{{ example_tag_end }}

{{ example_tag_start }}
Q: "Find the room number of the rooms which can sit 50 to 100 students and their buildings."
Schema_links: [classroom.building,classroom.room_number,classroom.capacity,50,100]
SQL: {{sql_tag_start}}classroom_df.filter((F.col("capacity") >= 50) & (F.col("capacity") <= 100)).select("building", "room_number"){{sql_tag_end}}
{{ example_tag_end }}

{{ example_tag_start }}
Q: "Give the name of the student in the History department with the most credits."
Schema_links: [student.name,student.dept_name,student.tot_cred,History]
SQL: {{sql_tag_start}}student_df.filter(F.col("dept_name") == "History").orderBy(F.col("tot_cred").desc()) .select("name").limit(1){{sql_tag_end}}
{{ example_tag_end }}

{{ example_tag_start }}
Q: "Find the total budgets of the Marketing or Finance department."
Schema_links: [department.budget,department.dept_name,Marketing,Finance]
SQL: {{sql_tag_start}}department_df.filter((F.col("dept_name") == "Marketing") | (F.col("dept_name") == "Finance")) .agg(F.sum("budget").alias("total_budget")){{sql_tag_end}}
{{ example_tag_end }}

{{ example_tag_start }}
Q: "Find the department name of the instructor whose name contains 'Soisalon'."
Schema_links: [instructor.dept_name,instructor.name,Soisalon]
SQL: {{sql_tag_start}}instructor_df.filter(F.col("name").like("%Soisalon%")).select("dept_name"){{sql_tag_end}}
{{ example_tag_end }}

{{ example_tag_start }}
Q: "What is the name of the department with the most credits?"
Schema_links: [course.dept_name,course.credits]
SQL: {{sql_tag_start}}course_df.groupBy("dept_name").agg(F.sum("credits").alias("total_credits")).orderBy(F.col("total_credits").desc()).select("dept_name").limit(1){{sql_tag_end}}
{{ example_tag_end }}

{{ example_tag_start }}
Q: "How many instructors teach a course in the Spring of 2010?"
Schema_links: [teaches.ID,teaches.semester,teaches.YEAR,Spring,2010]
SQL: {{sql_tag_start}}teaches_df.filter((F.col("semester") == "Spring") & (F.col("YEAR") == 2010)).select("ID").distinct().count()
{{sql_tag_end}}
{{ example_tag_end }}

{{ example_tag_start }}
Q: "Find the name of the students and their department names sorted by their total credits in ascending order."
Schema_links: [student.name,student.dept_name,student.tot_cred]
SQL: {{sql_tag_start}}student_df.select("name", "dept_name").orderBy("tot_cred"){{sql_tag_end}}
{{ example_tag_end }}

{{ example_tag_start }}
Q: "Find the year which offers the largest number of courses."
Schema_links: [SECTION.YEAR,SECTION.*]
SQL: {{sql_tag_start}}section_df.groupBy("YEAR").count().orderBy(F.col("count").desc()).select("YEAR").limit(1){{sql_tag_end}}
{{ example_tag_end }}

{{ example_tag_start }}
Q: "What are the names and average salaries for departments with average salary higher than 42000?"
Schema_links: [instructor.dept_name,instructor.salary,42000]
SQL: {{sql_tag_start}}instructor_df.groupBy("dept_name").agg(F.avg("salary").alias("avg_salary")).filter(F.col("avg_salary") > 42000).select("dept_name", "avg_salary"){{sql_tag_end}}
{{ example_tag_end }}

{{ example_tag_start }}
Q: "How many rooms in each building have a capacity of over 50?"
Schema_links: [classroom.*,classroom.building,classroom.capacity,50]
SQL: {{sql_tag_start}}classroom_df.filter(F.col("capacity") > 50).groupBy("building").count(){{sql_tag_end}}
{{ example_tag_end }}

{{ example_tag_start }}
Q: "Find the maximum and average capacity among rooms in each building."
Schema_links: [classroom.building,classroom.capacity]
SQL: {{sql_tag_start}}classroom_df.groupBy("building").agg(F.max("capacity").alias("max_capacity"),F.avg("capacity").alias("avg_capacity")){{sql_tag_end}}
{{ example_tag_end }}

{{ example_tag_start }}
Q: "Find the title of the course that is offered by more than one department."
Schema_links: [course.title]
SQL: {{sql_tag_start}}course_df.groupBy("title").count().filter(F.col("count") > 1).select("title"){{sql_tag_end}}
{{ example_tag_end }}

{{ example_tag_start }}
Q: "{{test_sample_text}}"