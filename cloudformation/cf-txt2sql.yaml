AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This CloudFormation template configures SageMaker Studio with minimal VPC requirements and public internet access for non-EFS traffic.

Resources:
  LambdaHelper:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import logging
          import traceback

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          ec2 = boto3.client('ec2')
          sagemaker = boto3.client('sagemaker')

          def lambda_handler(event, context):     
            try:         
              if event['RequestType'] == 'Create':
                  vpc_id = get_default_vpc_id()
                  subnets = get_subnets_for_vpc(vpc_id)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {'VpcId': vpc_id , "Subnets" : subnets}, '')
              elif event['RequestType'] == 'Delete':
                  cleanup_sagemaker_resources(event['ResourceProperties'])
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')
            except Exception as e:
              logger.exception(f"Lambda function failed: {str(e)}")
              cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})

          def get_default_vpc_id():
              vpcs = ec2.describe_vpcs(Filters=[{'Name': 'is-default', 'Values': ['true']}])
              vpcs = vpcs['Vpcs']
              vpc_id = vpcs[0]['VpcId']
              return vpc_id

          def get_subnets_for_vpc(vpcId):
              response = ec2.describe_subnets(
                  Filters=[
                      {
                          'Name': 'vpc-id',
                          'Values': [vpcId]
                      }
                  ]
              )
              subnet_ids = []
              for subnet in response['Subnets']:
                  subnet_ids.append(subnet['SubnetId'])
              return subnet_ids 

          def cleanup_sagemaker_resources(properties):
              domain_id = properties.get('DomainId')
              user_profile_name = properties.get('UserProfileName')

              if domain_id:
                  # Delete Spaces
                  spaces = sagemaker.list_spaces(DomainId=domain_id)
                  for space in spaces['Spaces']:
                      print(f"Deleting space: {space['SpaceName']}")
                      sagemaker.delete_space(DomainId=domain_id, SpaceName=space['SpaceName'])
                      waiter = sagemaker.get_waiter('space_deleted')
                      waiter.wait(DomainId=domain_id, SpaceName=space['SpaceName'])

                  # Delete UserProfile
                  if user_profile_name:
                      print(f"Deleting user profile: {user_profile_name}")
                      sagemaker.delete_user_profile(DomainId=domain_id, UserProfileName=user_profile_name)
                      waiter = sagemaker.get_waiter('user_profile_deleted')
                      waiter.wait(DomainId=domain_id, UserProfileName=user_profile_name)

                  # Delete Domain
                  print(f"Deleting domain: {domain_id}")
                  sagemaker.delete_domain(DomainId=domain_id, RetentionPolicy={'HomeEfsFileSystem': 'Delete'})
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 900

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EC2AndSageMakerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - sagemaker:DeleteSpace
                  - sagemaker:DeleteUserProfile
                  - sagemaker:DeleteDomain
                  - sagemaker:ListSpaces
                Resource: '*'

  DefaultVpcFinder:
    Type: Custom::ResourceForFindingDefaultVpc
    Properties:
      ServiceToken: !GetAtt LambdaHelper.Arn

  SageMakerExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonBedrockFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'  

  StudioDomain:
    Type: AWS::SageMaker::Domain
    Properties:
      DomainName: 'WorkshopDomain'
      AuthMode: IAM
      VpcId: !GetAtt DefaultVpcFinder.VpcId
      SubnetIds: !GetAtt DefaultVpcFinder.Subnets
      AppNetworkAccessType: PublicInternetOnly
      DefaultUserSettings:
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn

  StudioUserProfile:
    Type: AWS::SageMaker::UserProfile
    DependsOn: 
      - StudioDomain
    Properties:
      DomainId: !Ref StudioDomain
      UserProfileName: workshop-user
      UserSettings: 
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn

  JupyterAppSpace:
    Type: AWS::SageMaker::Space
    DependsOn: 
      - StudioUserProfile
    Properties:
      DomainId: !Ref StudioDomain
      OwnershipSettings:
        OwnerUserProfileName: workshop-user
      SpaceDisplayName: jupyterlab-space
      SpaceName: jupyterlab-space
      SpaceSettings:
        AppType: JupyterLab
        JupyterLabAppSettings:
          CodeRepositories: 
            - RepositoryUrl: https://github.com/dongjin-ml/text-to-sql-bedrock.git
          DefaultResourceSpec:
            InstanceType: ml.t3.medium  
        SpaceStorageSettings:
          EbsStorageSettings:
            EbsVolumeSizeInGb: 50
      SpaceSharingSettings:
        SharingType: Private

Outputs:
  SageMakerConsoleLink:
    Description: SageMaker Studio console link
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/sagemaker/home?region=${AWS::Region}#/studio/
  
  SageMakerExecutionRoleArn:
    Description: SageMaker Execution Role ARN
    Value: !GetAtt SageMakerExecutionRole.Arn
 
  JupyterAppSpaceName:
    Description: Name of the JupyterLab App Space
    Value: !Ref JupyterAppSpace